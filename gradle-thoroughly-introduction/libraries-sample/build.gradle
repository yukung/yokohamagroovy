buildscript {
    ext {
        springBootVersion = '1.3.0.M2'
        jooqVersion = '3.6.2'
        h2Version = '1.4.187'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.jooq:jooq-codegen:${jooqVersion}"
        classpath "com.h2database:h2:${h2Version}"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'

ext {
    javaVersion = 1.8
    lombokVersion = '1.16.4'
    flywayVersion = '3.2.1'
}

jar {
    baseName = 'libraries-sample'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion
tasks.withType(JavaCompile)*.options*.encoding = 'UTF-8'

configurations {
    provided
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
    generated
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-devtools"
    compile "org.springframework.boot:spring-boot-starter-jooq"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.flywaydb:flyway-core:${flywayVersion}"
    provided "org.projectlombok:lombok:${lombokVersion}"
    runtime "com.h2database:h2"
    testCompile "org.springframework.boot:spring-boot-starter-test"
}

task jooqGenerate << {
    def writer = new StringWriter()
    def xml = new groovy.xml.MarkupBuilder(writer)
    xml.configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.6.0.xsd') {
        jdbc() {
            driver 'org.h2.Driver'
            url 'jdbc:h2:file:/tmp/libraries'
            user 'sa'
            password ''
        }
        generator() {
            database() {
                xml.name 'org.jooq.util.h2.H2Database'
                includes '.*'
                excludes 'schema_version'
                inputSchema 'PUBLIC'
                customTypes() {
                    ['LocalDate', 'LocalTime', 'LocalDateTime'].each { value ->
                        customType() {
                            xml.name value
                            type "java.time.$value"
                            converter "org.yukung.yokohamagroovy.libraries.infrastructure.db.${value}Converter"
                        }
                    }
                }
                forcedTypes() {
                    ['LocalDate'    : [/.*\.date_.*/, 'DATE'],
                     'LocalTime'    : [/.*\.date_.*/, 'TIME'],
                     'LocalDateTime': [/.*\.date_.*/, 'TIMESTAMP']
                    ].each { key, value ->
                        forcedType() {
                            xml.name key
                            expression value[0]
                            types value[1]
                        }
                    }
                }
            }
            generate() {
                pojos true
                daos true
                validationAnnotations true
            }
            target() {
                packageName 'org.yukung.yokohamagroovy.libraries.domain'
                directory 'src/generated/java'
            }
        }
    }
    org.jooq.util.GenerationTool.generate(
            javax.xml.bind.JAXB.unmarshal(
                    new StringReader(writer.toString()),
                    org.jooq.util.jaxb.Configuration.class
            )
    )
}

idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
        vcs = 'Git'
    }
    module {
        generatedSourceDirs += sourceSets.generated.java.srcDirs
        scopes.PROVIDED.plus += [configurations.provided]
        downloadJavadoc = true
        downloadSources = true
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}
