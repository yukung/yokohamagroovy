buildscript {
    ext {
        javaVersion = JavaVersion.VERSION_1_8
        springBootVersion = '1.3.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

plugins {
    id "groovy"
    id "checkstyle"
    id "findbugs"
    id "jacoco"
    id "eclipse"
    id "idea"
    id "org.flywaydb.flyway" version "3.2.1"
//    id "org.akhikhl.gretty" version "1.2.4"
}

apply plugin: 'spring-boot'

group = 'org.yukung.yokohamagroovy'

targetCompatibility = sourceCompatibility = javaVersion
tasks.withType(AbstractCompile)*.options*.encoding = 'UTF-8'

configurations {
    provided
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
    integrationTest {
        java.srcDir file('src/integrationTest/java')
        resources.srcDir file('src/integrationTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testCompile
        runtimeClasspath = output + compileClasspath + configurations.testRuntime
    }
    functionalTest {
        java.srcDir file('src/functionalTest/java')
        resources.srcDir file('src/functionalTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testCompile
        runtimeClasspath = output + compileClasspath + configurations.testRuntime
    }
}

repositories {
    mavenCentral()
    maven { url "http://public-maven.classmethod.info/release" }
    maven { url "http://public-maven.classmethod.info/snapshot" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-devtools"
    compile "org.springframework.boot:spring-boot-starter-jdbc"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile "org.flywaydb:flyway-core"
    provided "org.projectlombok:lombok:1.16.6"
    compile "org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16"
    runtime "com.h2database:h2"
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.dbunit:dbunit:2.4.9"
    testCompile "jp.classmethod.testing:cmtest-db:0.4"
    testCompile "org.skyscreamer:jsonassert"
    // functional test
    testCompile 'org.spockframework:spock-spring:1.0-groovy-2.4'
    testCompile 'org.gebish:geb-spock:0.10.0'
    testCompile 'org.seleniumhq.selenium:selenium-firefox-driver:2.49.0'
}

checkstyle {
    toolVersion = '6.12.1'
}

findbugs {
    reportLevel = 'medium'
}

jacoco {
    toolVersion = '0.7.5.201505241946'
}

flyway {
    url = "jdbc:h2:file:./build/libraries"
    user = "sa"
    password = ""
}

// gretty だと Spring Boot の組み込みサーバの WebApplicationContext を奪ってしまい
// spring-boot-gradle-plugin で動かなくなってしまう
//gretty {
//    springBoot = false
//    servletContainer = 'tomcat8'
//    integrationTestTask = 'functionalTest'
//}

jar {
    baseName = 'libraries'
    version = '0.0.1-SNAPSHOT'
}

idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
        vcs = 'Git'
    }
    module {
        scopes.PROVIDED.plus += [configurations.provided]
        downloadJavadoc = true
        downloadSources = true
    }
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
        plusConfigurations += [configurations.provided]
        downloadJavadoc = true
        downloadSources = true
    }
}

test {
    // テストを並列実行
//    maxParallelForks = 2

    // ユニットテスト用レポートディレクトリの変更
    reports.html.destination = file("${reports.html.destination}/unit")
    reports.junitXml.destination = file("${reports.junitXml.destination}/unit")
}

// インテグレーションテスト
task integrationTest(type: Test, dependsOn: test) {
    group = 'verification'
    mustRunAfter test

    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath

    reports.html.destination = file("${reports.html.destination}/integration")
    reports.junitXml.destination = file("${reports.junitXml.destination}/integration")
}
check.dependsOn integrationTest

// テストコードの checkstyle, findbugs の検査はパスする
['checkstyleTest', 'checkstyleIntegrationTest', 'findbugsTest', 'findbugsIntegrationTest'].each { task ->
    tasks.create(name: task, overwrite: true) << {}
}

// ファンクショナルテスト
task functionalTest(type: Test) {
    group = "verification"

    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath

    reports.html.destination = file("${reports.html.destination}/functional")
    reports.junitXml.destination = file("${reports.junitXml.destination}/functional")

    systemProperty 'geb.env', 'firefox'
    systemProperty 'geb.build.reportsDir', reporting.file('geb')
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}
